% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gitlab.gen.R
\name{file_update}
\alias{file_update}
\title{Update file in GitLab repository}
\usage{
file_update(
  content,
  path,
  id_project = pal::pkg_config_val("id_project"),
  start_branch = project_default_branch(id_project = id_project, base_url = base_url,
    token = token, max_tries = max_tries),
  branch = start_branch,
  commit_message = "auto: update file via gitlab R pkg",
  author_email = NULL,
  author_name = NULL,
  encoding = c("text", "base64"),
  execute_filemode = FALSE,
  last_commit_id = NULL,
  base_url = pal::pkg_config_val("base_url"),
  token = pal::pkg_config_val("token"),
  max_tries = 3L
)
}
\arguments{
\item{content}{\code{\link[base:character]{character(1)}} or \code{\link[base:raw]{raw()}}\cr
File content, as a character scalar for text files, or a raw vector for binary files. Or the path to a local file as a character scalar if
\code{from_file = TRUE}.}

\item{path}{\code{\link[base:character]{character(1)}}\cr
File path, relative to the repository root.}

\item{id_project}{\code{\link[base:integer]{integer(1)}}\cr
GitLab project identifier.}

\item{start_branch}{\code{\link[base:character]{character(1)}}\cr
Name of the base branch to create \code{branch} from if it doesn't already exist.}

\item{branch}{\code{\link[base:character]{character(1)}}\cr
Git branch name to upload the file to.}

\item{commit_message}{\code{\link[base:character]{character(1)}}\cr
Git commit message.}

\item{author_email}{\code{\link[base:character]{character(1)}}\cr
Git commit author's email address. \code{NULL} means to default to the \code{token} owner.}

\item{author_name}{\code{\link[base:character]{character(1)}}\cr
Git commit author's name. \code{NULL} means to default to the \code{token} owner.}

\item{encoding}{\code{\link[base:character]{character(1)}}\cr
File encoding. One of \code{"text"} or \code{"base64"}.}

\item{execute_filemode}{\code{\link[base:logical]{logical(1)}}\cr
Whether or not to mark the uploaded file as executable.}

\item{last_commit_id}{\code{\link[base:character]{character(1)}}\cr
Last known file commit identifier. If provided (and valid), GitLab won't write to the file if a commit made after \code{last_commit_id} has modified the file.
Intended to avoid concurrency issues (e.g. from CI pipelines). \code{NULL} means to skip the check.}

\item{base_url}{\code{\link[base:character]{character(1)}}\cr
Base URL to the GitLab v4 RESTful API root.}

\item{token}{\code{\link[base:character]{character(1)}}\cr
\href{https://docs.gitlab.com/ee/api/rest/authentication.html}{GitLab access token} used for authentication. If \code{NULL}, the API request is made unauthenticated
which results in \emph{HTTP 404 Not Found} and other errors for non-public resources.}

\item{max_tries}{\code{\link[base:integer]{integer(1)}}\cr
Maximum number of request attempts in case of an HTTP error. An integerish scalar. Retries are performed using exponential backoff and jitter, see \code{\link[httr2:req_retry]{httr2::req_retry()}} for details.}
}
\value{
A list with metadata about the newly created file.
}
\description{
Updates an existing file in a GitLab repository via the
\href{https://docs.gitlab.com/ee/api/repository_files.html#update-existing-file-in-repository}{\code{PUT /projects/{id_project}/repository/files/{path}}} endpoint of
GitLab's v4 RESTful API.
}
\examples{
\dontrun{
gitlab::file_update(content = "a different line of text",
                    path = "test.md",
                    id_project = 64767928)}
}
\seealso{
Other functions to manage files on GitLab:
\code{\link{commit_files}()},
\code{\link{file_commit_action}()},
\code{\link{file_content}()},
\code{\link{file_create}()},
\code{\link{file_delete}()},
\code{\link{file_exists}()},
\code{\link{file_full}()},
\code{\link{file_meta}()},
\code{\link{file_req}()},
\code{\link{file_write}()},
\code{\link{files_delete}()}
}
\concept{files}
