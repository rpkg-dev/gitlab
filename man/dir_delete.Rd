% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gitlab.gen.R
\name{dir_delete}
\alias{dir_delete}
\title{Delete directory from GitLab repository}
\usage{
dir_delete(
  path,
  id_project = pal::pkg_config_val("id_project"),
  start_branch = project_default_branch(id_project = id_project, base_url = base_url,
    token = token, max_tries = max_tries),
  start_sha = NULL,
  start_project = NULL,
  branch = start_branch,
  commit_message = "auto: delete directory via gitlab R pkg",
  author_email = NULL,
  author_name = NULL,
  incl_stats = TRUE,
  force = FALSE,
  last_commit_id = NULL,
  base_url = pal::pkg_config_val("base_url"),
  token = pal::pkg_config_val("token"),
  max_tries = 3L
)
}
\arguments{
\item{path}{\code{\link[base:character]{character(1)}}\cr
Directory path, relative to the repository root.}

\item{id_project}{\code{\link[base:integer]{integer(1)}}\cr
GitLab project identifier.}

\item{start_branch}{\code{\link[base:character]{character(1)}}\cr
Name of the base branch to create \code{branch} from if it doesn't already exist.}

\item{start_sha}{\code{\link[base:character]{character(1)}}\cr
SHA value of the commit to create \code{branch} from. Alternative to \code{start_branch}.}

\item{start_project}{\code{\link[base:character]{character(1)}}\cr
GitLab project ID or \href{https://docs.gitlab.com/ee/api/rest/index.html#namespaced-paths}{URL-encoded path} of the project to start the new branch from.
Defaults to the value of id.}

\item{branch}{\code{\link[base:character]{character(1)}}\cr
Git branch name to upload the file to.}

\item{commit_message}{\code{\link[base:character]{character(1)}}\cr
Git commit message.}

\item{author_email}{\code{\link[base:character]{character(1)}}\cr
Git commit author's email address. \code{NULL} means to default to the \code{token} owner.}

\item{author_name}{\code{\link[base:character]{character(1)}}\cr
Git commit author's name. \code{NULL} means to default to the \code{token} owner.}

\item{incl_stats}{\code{\link[base:logical]{logical(1)}}\cr
Whether or not to include commit statistics in the result.}

\item{force}{\code{\link[base:logical]{logical(1)}}\cr
Whether or not to overwrite \code{branch} with a new commit based on \code{start_branch} or \code{start_sha}. Equivalent of \verb{git push --force}.}

\item{last_commit_id}{\code{\link[base:character]{character(1)}}\cr
Last known file commit identifier. If provided (and valid), GitLab will only proceed if no commit made after \code{last_commit_id} has modified the file.
Intended to avoid concurrency issues (e.g. from CI pipelines). \code{NULL} means to skip the check. Only considered for \code{"delete"}, \code{"move"} and \code{"update"}
\code{action}s.}

\item{base_url}{\code{\link[base:character]{character(1)}}\cr
Base URL to the GitLab v4 RESTful API root.}

\item{token}{\code{\link[base:character]{character(1)}}\cr
\href{https://docs.gitlab.com/ee/api/rest/authentication.html}{GitLab access token} used for authentication. If \code{NULL}, the API request is made unauthenticated
which results in \emph{HTTP 404 Not Found} and other errors for non-public resources.}

\item{max_tries}{\code{\link[base:integer]{integer(1)}}\cr
Maximum number of attempts to retry in case of an HTTP error.}
}
\value{
A list with metadata about the created commit.
}
\description{
Deletes all files (Git blob objects) and submodule references (Git commit objects) within a directory of a GitLab repository, effectively deleting the
directory (Git tree object), in a single Git commit. High-level convenience function that combines \code{\link[=dir_ls]{dir_ls()}} and \code{\link[=files_delete]{files_delete()}}.
}
\examples{
\dontrun{
gitlab::dir_delete(path = "docs/dev",
                   id_project = 64767928)}
}
\seealso{
Other directory management functions:
\code{\link{dir_ls}()}
}
\concept{dirs}
