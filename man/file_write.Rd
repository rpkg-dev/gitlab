% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gitlab.gen.R
\name{file_write}
\alias{file_write}
\title{Write file to GitLab repository}
\usage{
file_write(
  content,
  path,
  id_proj,
  start_branch = project_default_branch(id_proj = id_proj, base_url = base_url, token =
    token, max_tries = max_tries),
  branch = start_branch,
  from_file = FALSE,
  overwrite = TRUE,
  force = FALSE,
  commit_message = "auto: write file via gitlab R pkg",
  author_email = NULL,
  author_name = NULL,
  execute_filemode = FALSE,
  last_commit_id = file_meta(path = path, attribute = "last_commit_id", id_proj =
    id_proj, ref = branch, base_url = base_url, token = token, max_tries = max_tries),
  base_url = pal::pkg_config_val("base_url"),
  token = pal::pkg_config_val("token"),
  max_tries = 3L,
  quiet = FALSE
)
}
\arguments{
\item{content}{\code{\link[base:character]{character(1)}} or \code{\link[base:raw]{raw()}}\cr
File content, as a character scalar for text files, or a raw vector for binary files. Or the path to a local file as a character scalar if
\code{from_file = TRUE}.}

\item{path}{\code{\link[base:character]{character(1)}}\cr
File path, relative to the repository root.}

\item{id_proj}{\code{\link[base:integer]{integer(1)}}\cr
GitLab project identifier.}

\item{start_branch}{\code{\link[base:character]{character(1)}}\cr
Name of the base branch to create \code{branch} from if it doesn't already exist.}

\item{branch}{\code{\link[base:character]{character(1)}}\cr
Git branch name to upload the file to.}

\item{from_file}{\code{\link[base:logical]{logical(1)}}\cr
Whether or not \code{content} indicates the path to a local file instead of the actual file content.}

\item{overwrite}{\code{\link[base:logical]{logical(1)}}\cr
Whether or not to overwrite an already existing file. Unless \code{force = TRUE}, the file is only overwritten if it is not identical to \code{content}.}

\item{force}{\code{\link[base:logical]{logical(1)}}\cr
Whether or not to overwrite an already existing file even if it is identical to \code{content}.}

\item{commit_message}{\code{\link[base:character]{character(1)}}\cr
Git commit message.}

\item{author_email}{\code{\link[base:character]{character(1)}}\cr
Git commit author's email address. \code{NULL} means to default to the \code{token} owner.}

\item{author_name}{\code{\link[base:character]{character(1)}}\cr
Git commit author's name. \code{NULL} means to default to the \code{token} owner.}

\item{execute_filemode}{\code{\link[base:logical]{logical(1)}}\cr
Whether or not to mark the uploaded file as executable,}

\item{last_commit_id}{\code{\link[base:character]{character(1)}}\cr
Last known file commit identifier. If provided (and valid), GitLab won't write to the file if a commit made after \code{last_commit_id} has modified the file.
Intended to avoid concurrency issues (e.g. from CI pipelines). \code{NULL} means to skip the check.}

\item{base_url}{\code{\link[base:character]{character(1)}}\cr
Base URL to the GitLab v4 RESTful API root.}

\item{token}{\code{\link[base:character]{character(1)}}\cr
\href{https://docs.gitlab.com/ee/api/rest/authentication.html}{GitLab access token} used for authentication. If \code{NULL}, the API request is made unauthenticated
which results in \emph{HTTP 404 Not Found} and other errors for non-public resources.}

\item{max_tries}{\code{\link[base:integer]{integer(1)}}\cr
Maximum number of attempts to retry in case of an HTTP error.}

\item{quiet}{\code{\link[base:logical]{logical(1)}}\cr
Whether or not to suppress printing status output from internal processing.}
}
\value{
\code{path}, invisibly.
}
\description{
Uploads a file to a GitLab repository via \href{https://docs.gitlab.com/ee/api/rest/}{GitLab's v4 RESTful API}. High-level function that by default skips
uploading identical file content and automatically choses \code{\link[=file_create]{file_create()}} or \code{\link[=file_update]{file_update()}} based on whether the file already exists or not.
}
\details{
To save up to two additional \code{HEAD} requests, set \code{start_branch} and \code{last_commit_id} explicitly. Setting \code{last_commit_id = NULL} is fine as long as file
writes are part of a controlled, single-user process where concurrency is not a concern.
}
\examples{
\dontrun{
gitlab::file_write(content = "a line of text",
                   path = "test.md",
                   id_proj = 64767928)}
}
\seealso{
Other file management functions:
\code{\link{file_content}()},
\code{\link{file_create}()},
\code{\link{file_delete}()},
\code{\link{file_exists}()},
\code{\link{file_full}()},
\code{\link{file_meta}()},
\code{\link{file_req}()},
\code{\link{file_update}()}
}
\concept{files}
