% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gitlab.gen.R
\name{file_content}
\alias{file_content}
\title{Read in file from GitLab repository}
\usage{
file_content(
  path,
  id_project = funky::config_val("id_project"),
  ref = NULL,
  base_url = funky::config_val("base_url"),
  token = funky::config_val("token"),
  max_tries = 3L
)
}
\arguments{
\item{path}{\code{\link[base:character]{character(1)}}\cr
File path, relative to the repository root.}

\item{id_project}{\code{\link[base:integer]{integer(1)}}\cr
GitLab project identifier.}

\item{ref}{\code{\link[base:character]{character(1)}}\cr
\href{https://git-scm.com/docs/revisions#_specifying_revisions}{Git revision expression} matching the desired Git tree object, e.g. a ref name (branch, tag,
etc.), a commit identifier, or another symbolic reference like \code{"HEAD~10"}. Omitted if \code{NULL}, otherwise set as a URL parameter in the API request. Note
that the GitLab API doesn't support every type of revision expression.}

\item{base_url}{\code{\link[base:character]{character(1)}}\cr
Base URL to the GitLab v4 RESTful API root.}

\item{token}{\code{\link[base:character]{character(1)}}\cr
\href{https://docs.gitlab.com/ee/api/rest/authentication.html}{GitLab access token} used for authentication. If \code{NULL}, the API request is made unauthenticated
which results in \emph{HTTP 404 Not Found} and other errors for non-public resources.}

\item{max_tries}{\code{\link[base:integer]{integer(1)}}\cr
Maximum number of request attempts in case of an HTTP error. An integerish scalar. Retries are performed using exponential backoff and jitter, see \code{\link[httr2:req_retry]{httr2::req_retry()}} for details.}
}
\value{
A character scalar if \code{path} refers to a text file, otherwise a raw vector.
}
\description{
Downloads a file from a GitLab repository via the
\href{https://docs.gitlab.com/ee/api/repository_files.html#get-raw-file-from-repository}{\code{GET /projects/{id_project}/repository/files/{path}/raw}} endpoint of
GitLab's v4 RESTful API and returns its content.
}
\examples{
gitlab::file_content(path = "DESCRIPTION",
                     id_project = 64767928,
                     ref = "9c2fe95c63fef013205fe5ff64dd30494579f3f2") |>
  cat()
}
\seealso{
Other functions to manage files on GitLab:
\code{\link{commit_files}()},
\code{\link{file_commit_action}()},
\code{\link{file_create}()},
\code{\link{file_delete}()},
\code{\link{file_exists}()},
\code{\link{file_full}()},
\code{\link{file_meta}()},
\code{\link{file_req}()},
\code{\link{file_update}()},
\code{\link{file_write}()},
\code{\link{files_delete}()}
}
\concept{files}
