% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gitlab.gen.R
\name{file_commit_action}
\alias{file_commit_action}
\title{Assemble file commit action}
\usage{
file_commit_action(
  path,
  action = c("create", "delete", "move", "update", "chmod"),
  content = NULL,
  from_file = FALSE,
  previous_path = NULL,
  execute_filemode = NULL,
  last_commit_id = NULL
)
}
\arguments{
\item{path}{\code{\link[base:character]{character(1)}}\cr
Path to the file being acted on, relative to the repository root. For \code{action = "move"}, this is the destination path to move the file to.}

\item{action}{\code{\link[base:character]{character(1)}}\cr
Action to take on the file. One of \code{"create"}, \code{"delete"}, \code{"move"}, \code{"update"} or \code{"chmod"}.}

\item{content}{\code{\link[base:character]{character(1)}} or \code{\link[base:raw]{raw()}}\cr
File content, as a character scalar for text files, or a raw vector for binary files. Or the path to a local file as a character scalar if
\code{from_file = TRUE}. Only considered for \code{"create"} and \code{"update"} \code{action}s.}

\item{from_file}{\code{\link[base:logical]{logical(1)}}\cr
Whether or not \code{content} indicates the path to a local file instead of the actual file content.}

\item{previous_path}{\code{\link[base:character]{character(1)}}\cr
Original path to the file being moved. Only considered for \code{action = "move"}.}

\item{execute_filemode}{\code{\link[base:logical]{logical(1)}}\cr
Whether or not to mark the uploaded file as executable.}

\item{last_commit_id}{\code{\link[base:character]{character(1)}}\cr
Last known file commit identifier. If provided (and valid), GitLab will only proceed if no commit made after \code{last_commit_id} has modified the file.
Intended to avoid concurrency issues (e.g. from CI pipelines). \code{NULL} means to skip the check. Only considered for \code{"delete"}, \code{"move"} and \code{"update"}
\code{action}s.}
}
\value{
A \link[tibble:tbl_df-class]{tibble} row with the columns \code{action}, \code{file_path}, \code{previous_path}, \code{content}, \code{encoding}, \code{last_commit_id} and \code{execute_filemode}.
}
\description{
Creates an \code{actions} data row ready to be fed to \code{\link[=commit_files]{commit_files()}}.
}
\examples{
# totally silly sequence of file actions to commit
list(gitlab::file_commit_action(path = "test.txt",
                                action = "create",
                                content = "anyone there?"),
     gitlab::file_commit_action(path = "test.txt",
                                action = "update",
                                content = "#!/bin/sh\n\necho 'anyone there?'\n"),
     gitlab::file_commit_action(path = "test.sh",
                                action = "move",
                                previous_path = "test.txt"),
     gitlab::file_commit_action(path = "test.sh",
                                action = "chmod",
                                execute_filemode = TRUE),
     gitlab::file_commit_action(path = "test.sh",
                                action = "delete")) |>
  purrr::list_rbind()

# to create/update a file on GitLab with a local file's content
\dontrun{
gitlab::file_commit_action(path = "test.txt",
                           action = "create",
                           content = "/PATH/TO/LOCAL/FILE",
                           from_file = TRUE)}
}
\seealso{
Other functions to manage commits on GitLab:
\code{\link{commit_files}()}

Other functions to manage files on GitLab:
\code{\link{commit_files}()},
\code{\link{file_content}()},
\code{\link{file_create}()},
\code{\link{file_delete}()},
\code{\link{file_exists}()},
\code{\link{file_full}()},
\code{\link{file_meta}()},
\code{\link{file_req}()},
\code{\link{file_update}()},
\code{\link{file_write}()},
\code{\link{files_delete}()}
}
\concept{commits}
\concept{files}
